
const Constants = {
  baseURL: 'http://ec2-13-59-15-149.us-east-2.compute.amazonaws.com/articulations',
  tileTypes: ['Object', 'Part Label', 'Object Category', 'Moving Part', 'Base Part'],
  enabledDatasets: ['partnetsim'],
};

Constants.defaultAxisRuleTranslation = 'def func(joint):\n    \'\'\'\n    Axis rule function to generate motion axis\n \n    Args:\n         joint: Joint\n              The joint containing the moving part and the base part\n \n    Return:\n         axis: [float, float, float]\n              A unit vector indicating the direction of the motion axis\n         origin: [float, float, float]\n              A point on the line of the motion axis\n    \'\'\'\n \n    \'\'\'\n    Global positive x axis direction [1, 0, 0] through the center moving part\n    \'\'\'\n \n    origin = joint.moving_part.center\n    axis = [1, 0, 0]\n    return axis, origin';
Constants.defaultAxisRuleRotation = 'def func(joint):\n    \'\'\'\n    Axis rule function to generate motion axis\n \n    Args:\n         joint: Joint\n              The joint containing the moving part and the base part\n \n    Return:\n         axis: [float, float, float]\n              A unit vector indicating the direction of the motion axis\n         origin: [float, float, float]\n              A point on the line of the motion axis\n    \'\'\'\n \n    \'\'\'\n    Global positive x axis direction [1, 0, 0] through the center moving part\n    \'\'\'\n \n    origin = joint.moving_part.center\n    axis = [1, 0, 0]\n    return axis, origin';
Constants.defaultRangeRuleTranslation = 'def func(joint, axis, origin):\n    \'\'\'\n    Range rule function to generate motion range\n \n    Args:\n         joint: Joint\n              The joint containing the moving part and the base part\n         axis: [float, float, float]\n              A unit vector indicating the translation axis direction\n         origin: [float, float, float]\n              One point on the translation axis\n \n    Return:\n         ref: [float, float, float]\n              The reference position of the motion ("0" position), a position on the translation axis line.\n         current_pose: float\n              The distance between the current position and the reference position.\n         min_range: float\n              The minimum translation range with respected to the ref.\n         max_range: float\n              The maximum translation range with respected to the ref.\n    \'\'\'\n \n    \'\'\'\n    (0, 1) ref to the current moving part center\n    \'\'\'\n  \n    ref = joint.moving_part.center\n    current_pose = 0\n    min_range = 0\n    max_range = 1\n \n    return ref, current_pose, min_range, max_range';
Constants.defaultRangeRuleRotation = 'def func(joint, axis, origin):\n    \'\'\'\n    Range rule function to generate motion range\n \n    Args:f\n         joint: Joint\n              The joint containing the moving part and the base part\n         axis: [float, float, float]\n              A unit vector indicating the rotation axis direction\n         origin: [float, float, float]\n              One point on the rotation axis\n \n    Return:\n         ref: [float, float, float]\n              A unit vector indicating the reference direction of the motion ("0" direction), this vector should be perpendicular to the rotation axis\n         current_pose: float\n              The angle between the vector indicating the current orientation of the moving part and the ref vector\n         min_range: float\n              The minimum rotation range with respected to the ref\n         max_range: float\n              The maximum rotation range with respected to the ref\n    \'\'\'\n \n    \'\'\'\n    (0, 0.5pi) ref to the default ref\n    \'\'\'\n  \n    moving_lever = default_lever_arm(joint.moving_part, axis, origin)\n    ref = default_reference_vector(joint.base_part, moving_lever, axis, origin)\n    current_pose = signed_angle_between(moving_lever, ref, axis)\n    min_range = 0\n    max_range = 0.5 * np.pi\n    return ref, current_pose, min_range, max_range';

export default Constants;
